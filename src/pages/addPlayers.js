import Head from "next/head";
import styled from "styled-components";
import { useState } from "react";
import { useRouter } from "next/router";
import { usePlayers } from "@/context/playersContext";
import { IoPersonAddSharp } from "react-icons/io5";
import Modal from "@/components/organisms/Modal";
import Avatar from "@/components/atoms/Avatar";
import AvatarList from "@/components/organisms/AvatarList";
import Button from "@/components/atoms/Button";
import Input from "@/components/atoms/Input";
import GenderRadio from "@/components/molecules/GenderRadio";
import PlayersList from "@/components/organisms/PlayersList";
import {
  maleAvatars,
  femaleAvatars,
} from "@/components/organisms/AvatarList/avatarLists";
import {
  Layout,
  Logo,
  AddFormLabel,
  AddFormWrapper,
  ZonesWrapper,
  PlayersWrapper
} from "@/styles/addPlayers";
import toast from "react-hot-toast";

export default function AddPlayer() {
  const router = useRouter();
  const { players, addPlayer } = usePlayers();
  const [name, setName] = useState("");
  const [gender, setGender] = useState(null);
  const [imageIndex, setImageIndex] = useState(0);
  const [image, setImage] = useState("/avatar/default.webp");
  const [isOpen, setIsOpen] = useState(false);

  const handleGenderChange = (newGender) => {
    setGender(newGender);
    setIsOpen(true);
  };

  const handleSelectImage = (newIndex) => {
    const list = gender === "male" ? maleAvatars : femaleAvatars;
    setImage(list[newIndex]);
    setImageIndex(newIndex);
    setIsOpen(false);
  };

  const handleClose = () => {
    const list = gender === "male" ? maleAvatars : femaleAvatars;
    setImage(list[imageIndex]);
    setIsOpen(false);
  };

  console.log('Players:',players);

  return (
    <>
      <Head>
        <title>Passion Cards</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Modal isOpen={isOpen} handleClose={handleClose}>
          <AvatarList
            gender={gender}
            imageId={imageIndex}
            handleClick={handleSelectImage}
          />
        </Modal>
        {/* <Logo /> */}
        <ZonesWrapper>
          <AddFormWrapper>
            <AddFormLabel>New Player</AddFormLabel>
            <Input
              label="Player Name"
              onChange={(e) => {
                setName(e.target.value);
              }}
              value={name}
            />

            <GenderRadio selected={gender} handleChange={handleGenderChange} />
            <Avatar
              avatar={image}
              dark={!gender}
              handleClick={() => {
                if (gender) setIsOpen(true);
              }}
            />
            <Button
              disabled={name === "" || !gender}
              onClick={() => {
                const isAdmin = name === "Miyagi" ? true : false;
                addPlayer({ id: players.length, name, gender, image, isAdmin });
                setName("");
                setGender(null);
                setImageIndex(0);
                setImage("/avatar/default.webp");
                toast.success('Added Successfully!');
              }}
            >
              <IoPersonAddSharp size={20} /> Add Player
            </Button>
          </AddFormWrapper>
          <PlayersWrapper>
            <AddFormLabel>Players</AddFormLabel>
            <PlayersList />
          </PlayersWrapper>
        </ZonesWrapper>
        <Button onClick={() => router.push("/")}>Done</Button>
      </Layout>
    </>
  );
}
